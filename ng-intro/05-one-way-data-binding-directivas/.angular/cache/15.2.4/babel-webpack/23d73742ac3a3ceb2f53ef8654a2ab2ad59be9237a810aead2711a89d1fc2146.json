{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/*\r\n  En el curso, al crear el componente, lo ha hecho implementando directament OnInit\r\n    en este caso, lo he puesto manualmente, así como la función correspondiente.\r\n  \r\n  OnInit, es el primer paso del ciclo de vida de Angular.\r\n  Eso implica, que se ejecutará de forma automática\r\n\r\n*/\nexport class ListadoComponent /* implements OnInit */ {\n  constructor() {\n    /*\r\n      constructor() {\r\n        console.log(\"constructor\");\r\n      }\r\n    */\n    /*\r\n      Un caso práctico donde podríamos utilizar OnInit, es para importar datos\r\n        ya sea de una API o de una BD, para disponer de ellos desde el inicio\r\n    */\n    /*\r\n      ngOnInit(): void {\r\n        console.log(\"ngOnInit\");\r\n      }\r\n    */\n    this.heroes = [\"Spiderman\", \"Ironman\", \"Hulk\", \"Thor\"];\n  }\n}\nListadoComponent /* implements OnInit */.ɵfac = function ListadoComponent_Factory(t) {\n  return new (t || ListadoComponent /* implements OnInit */)();\n};\nListadoComponent /* implements OnInit */.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ListadoComponent /* implements OnInit */,\n  selectors: [[\"app-listado\"]],\n  decls: 3,\n  vars: 0,\n  template: function ListadoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"listado!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"ul\");\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":";AAWA;;;;;;;;AAQA,OAAM,MAAOA,gBAAgB,CAAC,wBAAuB;EAbrDC;IAcE;;;;;IAMA;;;;IAKA;;;;;IAMA,WAAM,GAAa,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC;;;AAlBhDD,gBAAgB,CAAC;mBAAjBA,gBAAgB,CAAC,0BAAuB;AAAA;AAAxCA,gBAAgB,CAAC;QAAjBA,gBAAgB,CAAC;EAAuBE;EAAAC;EAAAC;EAAAC;IAAA;MCnBrDC,yBAAG;MAAAA,wBAAQ;MAAAA,iBAAI;MAEfA,qBAAS","names":["ListadoComponent","constructor","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\jmas\\Documents\\Angular\\ng-intro\\05-one-way-data-binding-directivas\\src\\app\\heroes\\listado\\listado.component.ts","C:\\Users\\jmas\\Documents\\Angular\\ng-intro\\05-one-way-data-binding-directivas\\src\\app\\heroes\\listado\\listado.component.html"],"sourcesContent":["/*\n  Tal y como se menciona abajo, \n  OnInit ha sido añadido manualmente y por ello en la linea siguiente, tampoco aparecía\n*/\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-listado',\n  templateUrl: './listado.component.html',\n})\n\n/*\n  En el curso, al crear el componente, lo ha hecho implementando directament OnInit\n    en este caso, lo he puesto manualmente, así como la función correspondiente.\n  \n  OnInit, es el primer paso del ciclo de vida de Angular.\n  Eso implica, que se ejecutará de forma automática\n\n*/\nexport class ListadoComponent /* implements OnInit */ {\n  /*\n    constructor() { \n      console.log(\"constructor\");\n    }\n  */\n\n  /*\n    Un caso práctico donde podríamos utilizar OnInit, es para importar datos \n      ya sea de una API o de una BD, para disponer de ellos desde el inicio\n  */\n\n  /*\n    ngOnInit(): void {\n      console.log(\"ngOnInit\");\n    }\n  */\n\n  heroes: string[] = [\"Spiderman\", \"Ironman\", \"Hulk\", \"Thor\"];\n}\n","<p>listado!</p>\n\n<ul></ul>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}