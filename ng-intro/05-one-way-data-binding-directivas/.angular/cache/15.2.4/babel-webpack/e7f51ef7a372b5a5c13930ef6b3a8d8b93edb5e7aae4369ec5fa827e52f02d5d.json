{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction ListadoComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const heroe_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", i_r2 + 1, \" - \", heroe_r1, \" \");\n  }\n}\n/*\r\n  En el curso, al crear el componente, lo ha hecho implementando directament OnInit\r\n    en este caso, lo he puesto manualmente, así como la función correspondiente.\r\n  \r\n  OnInit, es el primer paso del ciclo de vida de Angular.\r\n  Eso implica, que se ejecutará de forma automática\r\n\r\n*/\nexport class ListadoComponent /* implements OnInit */ {\n  constructor() {\n    /*\r\n      constructor() {\r\n        console.log(\"constructor\");\r\n      }\r\n    */\n    /*\r\n      Un caso práctico donde podríamos utilizar OnInit, es para importar datos\r\n        ya sea de una API o de una BD, para disponer de ellos desde el inicio\r\n    */\n    /*\r\n      ngOnInit(): void {\r\n        console.log(\"ngOnInit\");\r\n      }\r\n    */\n    this.heroes = [\"Spiderman\", \"Ironman\", \"Hulk\", \"Thor\", \"Capitán America\"];\n  }\n  borrarHeroe() {\n    console.log(\"borrando..\");\n    this.heroes.unshift();\n  }\n}\nListadoComponent /* implements OnInit */.ɵfac = function ListadoComponent_Factory(t) {\n  return new (t || ListadoComponent /* implements OnInit */)();\n};\nListadoComponent /* implements OnInit */.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ListadoComponent /* implements OnInit */,\n  selectors: [[\"app-listado\"]],\n  decls: 5,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n  template: function ListadoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"listado!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"ul\");\n      i0.ɵɵtemplate(3, ListadoComponent_li_3_Template, 2, 2, \"li\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function ListadoComponent_Template_button_click_4_listener() {\n        return ctx.borrarHeroe();\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.heroes);\n    }\n  },\n  dependencies: [i1.NgForOf],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;IASIA,0BAAgD;IAC5CA,YACJ;IAAAA,iBAAK;;;;;IADDA,eACJ;IADIA,0DACJ;;;ACAJ;;;;;;;;AAQA,OAAM,MAAOC,gBAAgB,CAAC,wBAAuB;EAbrDC;IAcE;;;;;IAMA;;;;IAKA;;;;;IAMA,WAAM,GAAa,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,iBAAiB,CAAC;;EAE9EC,WAAW;IACTC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB,IAAI,CAACC,MAAM,CAACC,OAAO,EAAE;EACvB;;AAvBWN,gBAAgB,CAAC;mBAAjBA,gBAAgB,CAAC,0BAAuB;AAAA;AAAxCA,gBAAgB,CAAC;QAAjBA,gBAAgB,CAAC;EAAuBO;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDnBrDZ,yBAAG;MAAAA,wBAAQ;MAAAA,iBAAI;MAEfA,0BAAI;MAOAA,+DAEK;MACTA,iBAAK;MAELA,iCAAgC;MAAxBA;QAAA,OAASa,iBAAa;MAAA,EAAC;MAACb,iBAAS;;;MALfA,eAAW;MAAXA,oCAAW","names":["i0","ListadoComponent","constructor","borrarHeroe","console","log","heroes","unshift","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\jmas\\Documents\\Angular\\ng-intro\\05-one-way-data-binding-directivas\\src\\app\\heroes\\listado\\listado.component.html","C:\\Users\\jmas\\Documents\\Angular\\ng-intro\\05-one-way-data-binding-directivas\\src\\app\\heroes\\listado\\listado.component.ts"],"sourcesContent":["<p>listado!</p>\n\n<ul>\n    <!-- \n        para utilizar las directivas, deberemos especificarlas dentro de alguna etiqueta, ya que sinó, \n          lo detectará como texto plano e imporimirá directamente ese linea\n        \n        también, podemos incluir código JS tal como la declaración del índice\n    -->\n    <li *ngFor=\"let heroe of heroes; let i = index\">\n        {{ i + 1}} - {{ heroe }}\n    </li>\n</ul>\n\n<button (click)=\"borrarHeroe()\"></button>","/*\n  Tal y como se menciona abajo, \n  OnInit ha sido añadido manualmente y por ello en la linea siguiente, tampoco aparecía\n*/\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-listado',\n  templateUrl: './listado.component.html',\n})\n\n/*\n  En el curso, al crear el componente, lo ha hecho implementando directament OnInit\n    en este caso, lo he puesto manualmente, así como la función correspondiente.\n  \n  OnInit, es el primer paso del ciclo de vida de Angular.\n  Eso implica, que se ejecutará de forma automática\n\n*/\nexport class ListadoComponent /* implements OnInit */ {\n  /*\n    constructor() { \n      console.log(\"constructor\");\n    }\n  */\n\n  /*\n    Un caso práctico donde podríamos utilizar OnInit, es para importar datos \n      ya sea de una API o de una BD, para disponer de ellos desde el inicio\n  */\n\n  /*\n    ngOnInit(): void {\n      console.log(\"ngOnInit\");\n    }\n  */\n\n  heroes: string[] = [\"Spiderman\", \"Ironman\", \"Hulk\", \"Thor\", \"Capitán America\"];\n\n  borrarHeroe(): void {\n    console.log(\"borrando..\");\n    this.heroes.unshift()\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}